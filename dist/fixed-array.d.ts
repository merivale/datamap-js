export default class FixedArray<V> {
    #private;
    constructor(values?: V[]);
    get length(): number;
    toArray(): V[];
    get(index: number): V | undefined;
    first(): V | undefined;
    last(): V | undefined;
    concat(...items: V[]): FixedArray<V>;
    copyWithin(target: number, start: number, end?: number): FixedArray<V>;
    entries(): IterableIterator<[number, V]>;
    every(cb: (value: V, index: number, array: V[]) => boolean): boolean;
    fill(value: V, start?: number, end?: number): FixedArray<V>;
    filter(cb: (value: V, index: number, array: V[]) => boolean): FixedArray<V>;
    find(cb: (value: V, index: number, array: V[]) => boolean): V | undefined;
    findIndex(cb: (value: V, index: number, array: V[]) => boolean): number;
    flat<D extends number = 1>(depth?: D): FixedArray<FlatArray<V[], D>>;
    flatMap(cb: (value: V, index: number, array: V[]) => unknown): FixedArray<unknown>;
    forEach(callback: (value: V, index: number, fixedArray: FixedArray<V>) => void, thisArg: unknown): void;
    includes(value: V): boolean;
    indexOf(value: V): number;
    join(separator?: string): string;
    keys(): IterableIterator<number>;
    lastIndexOf(value: V): number;
    map(cb: (value: V, index: number, array: V[]) => unknown): FixedArray<unknown>;
    pop(): FixedArray<V>;
    push(...values: V[]): FixedArray<V>;
    reduce(cb: (previousValue: V, currentValue: V, currentIndex: number, array: V[]) => V, initialValue?: V): V;
    reduceRight(cb: (previousValue: V, currentValue: V, currentIndex: number, array: V[]) => V, initialValue: V): V;
    reverse(): FixedArray<V>;
    shift(): FixedArray<V>;
    slice(start?: number, end?: number): FixedArray<V>;
    some(cb: (value: V, index: number, array: V[]) => boolean): boolean;
    sort(cb?: (a: V, b: V) => number): FixedArray<V>;
    splice(start: number, deleteCount?: number): FixedArray<V>;
    toLocaleString(): string;
    toString(): string;
    unshift(...values: V[]): FixedArray<V>;
    values(): IterableIterator<V>;
    [Symbol.iterator](): Generator<V, void, unknown>;
}
