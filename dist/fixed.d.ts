declare type Primitive = string | number | bigint | boolean | symbol | undefined | null;
export declare function fix<K, V, T extends FixedArray<V> | FixedSet<V> | FixedMap<K, V>>(value: T): T;
export declare function fix<V>(value: V[]): FixedArray<V>;
export declare function fix<K extends string | number | symbol, V>(value: Record<K, V>): FixedMap<K, V>;
export declare function fix(value: object): FixedMap<string, unknown>;
export declare function fix<T extends Primitive>(value: T): T;
export declare function fixSet<V>(values: V[]): FixedSet<V>;
export declare function fixMap<K, V>(values: object): FixedMap<K, V>;
export declare function unfix<V>(value: FixedArray<V>): Array<V>;
export declare function unfix<V>(value: FixedSet<V>): Set<V>;
export declare function unfix<K, V>(value: FixedMap<K, V>): Map<K, V>;
export declare function unfix<T extends Primitive>(value: T): T;
export declare function stringify(value: unknown): string;
export declare class FixedArray<V> {
    #private;
    constructor(values?: V[]);
    get length(): number;
    toArray(): V[];
    get(index: number): V | undefined;
    first(): V | undefined;
    last(): V | undefined;
    concat(...items: V[]): FixedArray<V>;
    copyWithin(target: number, start: number, end?: number): FixedArray<V>;
    entries(): IterableIterator<[number, V]>;
    every(cb: (value: V, index: number, array: V[]) => boolean): boolean;
    fill(value: V, start?: number, end?: number): FixedArray<V>;
    filter(cb: (value: V, index: number, array: V[]) => boolean): FixedArray<V>;
    find(cb: (value: V, index: number, array: V[]) => boolean): V | undefined;
    findIndex(cb: (value: V, index: number, array: V[]) => boolean): number;
    flat<D extends number = 1>(depth?: D): FixedArray<FlatArray<V[], D>>;
    flatMap(cb: (value: V, index: number, array: V[]) => unknown): FixedArray<unknown>;
    forEach(callback: (value: V, index: number, fixedArray: FixedArray<V>) => void, thisArg: unknown): void;
    includes(value: V): boolean;
    indexOf(value: V): number;
    join(separator?: string): string;
    keys(): IterableIterator<number>;
    lastIndexOf(value: V): number;
    map(cb: (value: V, index: number, array: V[]) => unknown): FixedArray<unknown>;
    pop(): FixedArray<V>;
    push(...values: V[]): FixedArray<V>;
    reduce(cb: (previousValue: V, currentValue: V, currentIndex: number, array: V[]) => V, initialValue?: V): V;
    reduceRight(cb: (previousValue: V, currentValue: V, currentIndex: number, array: V[]) => V, initialValue: V): V;
    reverse(): FixedArray<V>;
    shift(): FixedArray<V>;
    slice(start?: number, end?: number): FixedArray<V>;
    some(cb: (value: V, index: number, array: V[]) => boolean): boolean;
    sort(cb?: (a: V, b: V) => number): FixedArray<V>;
    splice(start: number, deleteCount?: number): FixedArray<V>;
    toLocaleString(): string;
    toString(): string;
    unshift(...values: V[]): FixedArray<V>;
    values(): IterableIterator<V>;
    [Symbol.iterator](): Generator<V, void, unknown>;
}
export declare class FixedSet<V> {
    #private;
    constructor(values?: V[] | Set<V>);
    get size(): number;
    toArray(): V[];
    add(value: V): FixedSet<V>;
    clear(): FixedSet<V>;
    delete(value: V): FixedSet<V>;
    has(value: V): boolean;
    values(): IterableIterator<V>;
    keys(): IterableIterator<V>;
    entries(): IterableIterator<[V, V]>;
    forEach(callback: (value: V, map: FixedSet<V>) => void, thisArg: unknown): void;
    [Symbol.iterator](): Generator<V, void, unknown>;
}
export declare class FixedMap<K, V> {
    #private;
    constructor(values?: object);
    get size(): number;
    toArray(): [K, V][];
    clear(): FixedMap<K, V>;
    delete(key: K): FixedMap<K, V>;
    get(key: K): V | undefined;
    has(key: K): boolean;
    set(key: K, value: V): FixedMap<K, V>;
    keys(): IterableIterator<K>;
    values(): IterableIterator<V>;
    entries(): IterableIterator<[K, V]>;
    forEach(callback: (key: K, value: V, map: FixedMap<K, V>) => void, thisArg: unknown): void;
    [Symbol.iterator](): Generator<[K, V], void, unknown>;
}
export {};
